///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package tb_administrator

import (
	"fmt"
	"time"

	"niceBackend/internal/repository/mysql"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *TbAdministrator {
	return new(TbAdministrator)
}

func NewQueryBuilder() *tbAdministratorQueryBuilder {
	return new(tbAdministratorQueryBuilder)
}

func (t *TbAdministrator) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type tbAdministratorQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *tbAdministratorQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *tbAdministratorQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&TbAdministrator{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *tbAdministratorQueryBuilder) Delete(db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&TbAdministrator{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *tbAdministratorQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&TbAdministrator{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *tbAdministratorQueryBuilder) First(db *gorm.DB) (*TbAdministrator, error) {
	ret := &TbAdministrator{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *tbAdministratorQueryBuilder) QueryOne(db *gorm.DB) (*TbAdministrator, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *tbAdministratorQueryBuilder) QueryAll(db *gorm.DB) ([]*TbAdministrator, error) {
	var ret []*TbAdministrator
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *tbAdministratorQueryBuilder) Limit(limit int) *tbAdministratorQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *tbAdministratorQueryBuilder) Offset(offset int) *tbAdministratorQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereId(p mysql.Predicate, value int64) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereIdIn(value []int64) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereIdNotIn(value []int64) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) OrderById(asc bool) *tbAdministratorQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereCreatedAt(p mysql.Predicate, value time.Time) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", p),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereCreatedAtIn(value []time.Time) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "IN"),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereCreatedAtNotIn(value []time.Time) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) OrderByCreatedAt(asc bool) *tbAdministratorQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_at "+order)
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereUpdatedAt(p mysql.Predicate, value time.Time) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", p),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereUpdatedAtIn(value []time.Time) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "IN"),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereUpdatedAtNotIn(value []time.Time) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) OrderByUpdatedAt(asc bool) *tbAdministratorQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_at "+order)
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereDeletedAt(p mysql.Predicate, value time.Time) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "deleted_at", p),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereDeletedAtIn(value []time.Time) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "deleted_at", "IN"),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereDeletedAtNotIn(value []time.Time) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "deleted_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) OrderByDeletedAt(asc bool) *tbAdministratorQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "deleted_at "+order)
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereUid(p mysql.Predicate, value string) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "uid", p),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereUidIn(value []string) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "uid", "IN"),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereUidNotIn(value []string) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "uid", "NOT IN"),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) OrderByUid(asc bool) *tbAdministratorQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "uid "+order)
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereAccount(p mysql.Predicate, value string) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "account", p),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereAccountIn(value []string) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "account", "IN"),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereAccountNotIn(value []string) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "account", "NOT IN"),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) OrderByAccount(asc bool) *tbAdministratorQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "account "+order)
	return qb
}

func (qb *tbAdministratorQueryBuilder) WherePassword(p mysql.Predicate, value string) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "password", p),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) WherePasswordIn(value []string) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "password", "IN"),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) WherePasswordNotIn(value []string) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "password", "NOT IN"),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) OrderByPassword(asc bool) *tbAdministratorQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "password "+order)
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereNickName(p mysql.Predicate, value string) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "nick_name", p),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereNickNameIn(value []string) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "nick_name", "IN"),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereNickNameNotIn(value []string) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "nick_name", "NOT IN"),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) OrderByNickName(asc bool) *tbAdministratorQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "nick_name "+order)
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereHeaderImg(p mysql.Predicate, value string) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "header_img", p),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereHeaderImgIn(value []string) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "header_img", "IN"),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereHeaderImgNotIn(value []string) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "header_img", "NOT IN"),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) OrderByHeaderImg(asc bool) *tbAdministratorQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "header_img "+order)
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereEmail(p mysql.Predicate, value string) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "email", p),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereEmailIn(value []string) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "email", "IN"),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereEmailNotIn(value []string) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "email", "NOT IN"),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) OrderByEmail(asc bool) *tbAdministratorQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "email "+order)
	return qb
}

func (qb *tbAdministratorQueryBuilder) WherePhone(p mysql.Predicate, value string) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "phone", p),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) WherePhoneIn(value []string) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "phone", "IN"),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) WherePhoneNotIn(value []string) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "phone", "NOT IN"),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) OrderByPhone(asc bool) *tbAdministratorQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "phone "+order)
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereCompany(p mysql.Predicate, value string) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "company", p),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereCompanyIn(value []string) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "company", "IN"),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereCompanyNotIn(value []string) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "company", "NOT IN"),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) OrderByCompany(asc bool) *tbAdministratorQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "company "+order)
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereAddress(p mysql.Predicate, value string) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "address", p),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereAddressIn(value []string) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "address", "IN"),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereAddressNotIn(value []string) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "address", "NOT IN"),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) OrderByAddress(asc bool) *tbAdministratorQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "address "+order)
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereRemark(p mysql.Predicate, value string) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "remark", p),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereRemarkIn(value []string) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "remark", "IN"),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereRemarkNotIn(value []string) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "remark", "NOT IN"),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) OrderByRemark(asc bool) *tbAdministratorQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "remark "+order)
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereStatus(p mysql.Predicate, value int32) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "status", p),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereStatusIn(value []int32) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "status", "IN"),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) WhereStatusNotIn(value []int32) *tbAdministratorQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "status", "NOT IN"),
		value,
	})
	return qb
}

func (qb *tbAdministratorQueryBuilder) OrderByStatus(asc bool) *tbAdministratorQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "status "+order)
	return qb
}
