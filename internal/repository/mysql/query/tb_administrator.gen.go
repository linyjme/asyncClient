// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"niceBackend/internal/repository/mysql/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newAdministrator(db *gorm.DB) administrator {
	_administrator := administrator{}

	_administrator.administratorDo.UseDB(db)
	_administrator.administratorDo.UseModel(&model.Administrator{})

	tableName := _administrator.administratorDo.TableName()
	_administrator.ALL = field.NewField(tableName, "*")
	_administrator.ID = field.NewInt64(tableName, "id")
	_administrator.CreatedAt = field.NewTime(tableName, "created_at")
	_administrator.UpdatedAt = field.NewTime(tableName, "updated_at")
	_administrator.DeletedAt = field.NewField(tableName, "deleted_at")
	_administrator.UID = field.NewString(tableName, "uid")
	_administrator.Account = field.NewString(tableName, "account")
	_administrator.Password = field.NewString(tableName, "password")
	_administrator.NickName = field.NewString(tableName, "nick_name")
	_administrator.HeaderImg = field.NewString(tableName, "header_img")
	_administrator.Email = field.NewString(tableName, "email")
	_administrator.Phone = field.NewString(tableName, "phone")
	_administrator.Company = field.NewString(tableName, "company")
	_administrator.Address = field.NewString(tableName, "address")
	_administrator.Remark = field.NewString(tableName, "remark")
	_administrator.Status = field.NewInt32(tableName, "status")

	_administrator.fillFieldMap()

	return _administrator
}

type administrator struct {
	administratorDo administratorDo

	ALL       field.Field
	ID        field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	UID       field.String
	Account   field.String
	Password  field.String
	NickName  field.String
	HeaderImg field.String
	Email     field.String
	Phone     field.String
	Company   field.String
	Address   field.String
	Remark    field.String
	Status    field.Int32

	fieldMap map[string]field.Expr
}

func (a administrator) Table(newTableName string) *administrator {
	a.administratorDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a administrator) As(alias string) *administrator {
	a.administratorDo.DO = *(a.administratorDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *administrator) updateTableName(table string) *administrator {
	a.ALL = field.NewField(table, "*")
	a.ID = field.NewInt64(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")
	a.UID = field.NewString(table, "uid")
	a.Account = field.NewString(table, "account")
	a.Password = field.NewString(table, "password")
	a.NickName = field.NewString(table, "nick_name")
	a.HeaderImg = field.NewString(table, "header_img")
	a.Email = field.NewString(table, "email")
	a.Phone = field.NewString(table, "phone")
	a.Company = field.NewString(table, "company")
	a.Address = field.NewString(table, "address")
	a.Remark = field.NewString(table, "remark")
	a.Status = field.NewInt32(table, "status")

	a.fillFieldMap()

	return a
}

func (a *administrator) WithContext(ctx context.Context) *administratorDo {
	return a.administratorDo.WithContext(ctx)
}

func (a administrator) TableName() string { return a.administratorDo.TableName() }

func (a *administrator) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *administrator) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 15)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["uid"] = a.UID
	a.fieldMap["account"] = a.Account
	a.fieldMap["password"] = a.Password
	a.fieldMap["nick_name"] = a.NickName
	a.fieldMap["header_img"] = a.HeaderImg
	a.fieldMap["email"] = a.Email
	a.fieldMap["phone"] = a.Phone
	a.fieldMap["company"] = a.Company
	a.fieldMap["address"] = a.Address
	a.fieldMap["remark"] = a.Remark
	a.fieldMap["status"] = a.Status
}

func (a administrator) clone(db *gorm.DB) administrator {
	a.administratorDo.ReplaceDB(db)
	return a
}

type administratorDo struct{ gen.DO }

func (a administratorDo) Debug() *administratorDo {
	return a.withDO(a.DO.Debug())
}

func (a administratorDo) WithContext(ctx context.Context) *administratorDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a administratorDo) Clauses(conds ...clause.Expression) *administratorDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a administratorDo) Returning(value interface{}, columns ...string) *administratorDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a administratorDo) Not(conds ...gen.Condition) *administratorDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a administratorDo) Or(conds ...gen.Condition) *administratorDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a administratorDo) Select(conds ...field.Expr) *administratorDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a administratorDo) Where(conds ...gen.Condition) *administratorDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a administratorDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *administratorDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a administratorDo) Order(conds ...field.Expr) *administratorDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a administratorDo) Distinct(cols ...field.Expr) *administratorDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a administratorDo) Omit(cols ...field.Expr) *administratorDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a administratorDo) Join(table schema.Tabler, on ...field.Expr) *administratorDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a administratorDo) LeftJoin(table schema.Tabler, on ...field.Expr) *administratorDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a administratorDo) RightJoin(table schema.Tabler, on ...field.Expr) *administratorDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a administratorDo) Group(cols ...field.Expr) *administratorDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a administratorDo) Having(conds ...gen.Condition) *administratorDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a administratorDo) Limit(limit int) *administratorDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a administratorDo) Offset(offset int) *administratorDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a administratorDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *administratorDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a administratorDo) Unscoped() *administratorDo {
	return a.withDO(a.DO.Unscoped())
}

func (a administratorDo) Create(values ...*model.Administrator) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a administratorDo) CreateInBatches(values []*model.Administrator, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a administratorDo) Save(values ...*model.Administrator) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a administratorDo) First() (*model.Administrator, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Administrator), nil
	}
}

func (a administratorDo) Take() (*model.Administrator, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Administrator), nil
	}
}

func (a administratorDo) Last() (*model.Administrator, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Administrator), nil
	}
}

func (a administratorDo) Find() ([]*model.Administrator, error) {
	result, err := a.DO.Find()
	return result.([]*model.Administrator), err
}

func (a administratorDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Administrator, err error) {
	buf := make([]*model.Administrator, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a administratorDo) FindInBatches(result *[]*model.Administrator, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a administratorDo) Attrs(attrs ...field.AssignExpr) *administratorDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a administratorDo) Assign(attrs ...field.AssignExpr) *administratorDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a administratorDo) Joins(field field.RelationField) *administratorDo {
	return a.withDO(a.DO.Joins(field))
}

func (a administratorDo) Preload(field field.RelationField) *administratorDo {
	return a.withDO(a.DO.Preload(field))
}

func (a administratorDo) FirstOrInit() (*model.Administrator, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Administrator), nil
	}
}

func (a administratorDo) FirstOrCreate() (*model.Administrator, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Administrator), nil
	}
}

func (a administratorDo) FindByPage(offset int, limit int) (result []*model.Administrator, count int64, err error) {
	if limit <= 0 {
		count, err = a.Count()
		return
	}

	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a administratorDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a *administratorDo) withDO(do gen.Dao) *administratorDo {
	a.DO = *do.(*gen.DO)
	return a
}
