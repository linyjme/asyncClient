package initialize

import (
	"github.com/gin-gonic/gin"
	"github.com/swaggo/gin-swagger"
	"github.com/swaggo/gin-swagger/swaggerFiles"
	"niceBackend/common/global"
	"niceBackend/core/middleware"
	"niceBackend/core/router"
	_ "niceBackend/docs"
	"time"
)

// 初始化总路由

func Routers() *gin.Engine {
	var Router = gin.Default()
	// Router.Use(middleware.LoadTls())  // https
	global.NICE_LOG.Info("use middleware logger")
	Router.Use(middleware.GlobalMiddleWare())
	// 跨域
	Router.Use(middleware.Cors()) // 跨域
	global.NICE_LOG.Info("use middleware cors")
	Router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	global.NICE_LOG.Info("register swagger handler")
	Router.Static("/app", "./dist/app")
	//Router.StaticFS(AppStaticPath, http.Dir(AppStaticPath))
	//Router.StaticFile("/", "./resources/favicon.ico")
	// 方便统一添加路由组前缀 多服务器上线使用
	PublicGroup := Router.Group("")
	{
		router.InitBaseRouter(PublicGroup)   // 注册基础功能路由 不做鉴权
		router.BaseClientRouter(PublicGroup) // 注册基础功能路由 不做鉴权
		router.BaseAdminRouter(PublicGroup)  // 注册基础功能路由 不做鉴权
	}
	PrivateGroup := Router.Group("")
	PrivateGroup.Use(middleware.JWTAuth())
	{
		router.InitApiRouter(PrivateGroup)   // 注册功能api路由
		router.AuthAdminRouter(PrivateGroup) // 注册功能api路由
		// Code generated by niceBackend Begin; DO NOT EDIT.
		// Code generated by niceBackend End; DO NOT EDIT.
	}
	LimitGroup := Router.Group("")
	LimitGroup.Use(middleware.RateLimitMiddleware(time.Millisecond * 10, 1000)).Use(middleware.JWTAuth())
	{
		//router.InitApiRouter(LimitGroup) // 注册功能api路由
		// Code generated by niceBackend Begin; DO NOT EDIT.
		// Code generated by niceBackend End; DO NOT EDIT.
	}
	global.NICE_LOG.Info("router register success")
	return Router
}
